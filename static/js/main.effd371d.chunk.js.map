{"version":3,"sources":["Services/pokemon.js","components/Card/pokemonTypeColors.js","components/Card/Card.js","components/Card/index.js","App.js","reportWebVitals.js","index.js"],"names":["getAllPokemon","url","a","Promise","resolve","reject","fetch","then","res","json","data","getPokemon","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","psychic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Card","pokemon","className","id","name","src","sprites","front_default","alt","types","map","type","style","backgroundColor","pokemonType","App","useState","pokemonData","setPokemonData","nextUrl","setNextUrl","prevUrl","setPrevUrl","loading","setLoading","initialUrl","useEffect","response","console","log","next","previous","loadingPokemon","results","fetchData","prev","all","pokemonRecord","_pokemonData","onClick","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.effd371d.chunk.js","sourcesContent":["export async function getAllPokemon(url) {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        resolve(data);\r\n      });\r\n  });\r\n}\r\n\r\nexport async function getPokemon(url) {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        resolve(data);\r\n      });\r\n  });\r\n}\r\n","const typeColors = {\r\n    bug: '#a2db39',\r\n    dragon: '#883af0',\r\n    fairy: '#fac5ea',\r\n    fire: '#ff1c1c',\r\n    ghost: '#766296',\r\n    ground: '#8c6623',\r\n    normal: '#a4acaf',\r\n    psychic: '#a206ba',\r\n    steel: '#9b9a9c',\r\n    dark: '#707070',\r\n    electric: '#f2da00',\r\n    fighting: '#c26023',\r\n    flying: '#a5dff0',\r\n    grass: '#334d04',\r\n    ice: '#6488e3',\r\n    poison: '#441d63',\r\n    rock: '#523b13',\r\n    water: '#5845c4'\r\n}\r\n\r\nexport default typeColors;","import React from \"react\";\r\nimport './style.css';\r\nimport pokemonType from './pokemonTypeColors';\r\nfunction Card({ pokemon }) {\r\n    return (\r\n        <div className=\"Card\" id={pokemon.name}>\r\n            <div className=\"Card__img\">\r\n                <img src={pokemon.sprites.front_default} alt=\"\" />\r\n            </div>\r\n\r\n            <div className=\"Card__name\">\r\n                {pokemon.name}\r\n            </div>\r\n            <div className=\"Card__types\">\r\n                {pokemon.types.map(type => {\r\n                    return (\r\n                        <div className=\"Card__type\" style={{ backgroundColor: pokemonType[type.type.name] }}>\r\n                            {type.type.name}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n\r\n}\r\nexport default Card;","import Card from  './Card';\r\n\r\nexport default Card;","import React, { useState, useEffect } from \"react\";\nimport { getAllPokemon } from \"./Services/pokemon\";\nimport { getPokemon } from \"./Services/pokemon\";\nimport Card from \"./components/Card\"\n\n\nimport \"./App.css\";\n\nfunction App() {\n  const [pokemonData, setPokemonData] = useState([]);\n  const [nextUrl, setNextUrl] = useState(\"\");\n  const [prevUrl, setPrevUrl] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [searchValue, setSearchValue] = useState(\"\");\n\n\n  const initialUrl = \"https://pokeapi.co/api/v2/pokemon\";\n\n  useEffect(() => {\n    async function fetchData() {\n      let response = await getAllPokemon(initialUrl);\n      console.log(response);\n      setNextUrl(response.next);\n      setPrevUrl(response.previous);\n      let pokemon = await loadingPokemon(response.results);\n      setLoading(false);\n    }\n    fetchData();\n  }, []);\n\n\n  const next = async () => {\n    setLoading(true);\n    let data = await getAllPokemon(nextUrl);\n    await loadingPokemon(data.results);\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  }\n\n  const prev = async () => {\n    if (!prevUrl) return;\n    setLoading(true);\n    let data = await getAllPokemon(prevUrl);\n    await loadingPokemon(data.results);\n    setNextUrl(data.next);\n    setPrevUrl(data.previous);\n    setLoading(false);\n  }\n\n  const search = async () => {\n    console.log(searchValue)\n    const searchUrl = \"https://pokeapi.co/api/v2/pokemon/\" + searchValue\n    console.log(searchUrl);\n    setLoading(false);\n  }\n\n  function clickHandle() {\n    const name = this.id;\n    console.log(name);\n  }\n\n\n  const loadingPokemon = async (data) => {\n    let _pokemonData = await Promise.all(\n      data.map(async (pokemon) => {\n        let pokemonRecord = await getPokemon(pokemon.url);\n        return pokemonRecord;\n      })\n    );\n\n    setPokemonData(_pokemonData);\n  };\n\n  console.log(pokemonData);\n  return (\n    <div>\n      {\n        loading ? <h1>Loading</h1> : (\n          <>\n            <div className=\"Navbar\">\n              {/*Not functional yet\n              <p>You can click a pokemon for more info!</p>\n              <div className=\"Search\">\n                <p>Search a pokemon!</p>\n                <input type=\"text\" name=\"search\" onChange={e => setSearchValue(e.target.value)} />\n                <button onClick={search}>Go!</button>\n              </div>\n              */}\n\n\n              <div className=\"btn\">\n                <button onClick={prev}>Prev</button>\n                <button onClick={next}>Next</button>\n              </div>\n            </div>\n\n\n\n\n\n            <div className=\"grid-container\">\n              {pokemonData.map((pokemon, i) => {\n                return <Card key={i} pokemon={pokemon} />\n\n              })}\n            </div>\n\n          </>\n        )\n\n      }\n    </div>);\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}